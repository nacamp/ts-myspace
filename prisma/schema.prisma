// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
  shadowDatabaseUrl = env("SHADOW_DATABASE_URL")
}

model Freqtrade {
  id        String    @id @default(uuid())
  strategy  String?
  exchange  String
  coin      String
  buyQty    Float
  sellQty   Float
  buyPrice  Float
  sellPrice Float
  tradedAt  DateTime?
  createdAt DateTime  @default(now())
}

model DepositProduct {
  id                Int      @id @default(autoincrement())

  name              String              // 상품 이름
  userName          String              // 가입자
  category          String              // 정기예금, 정기적금, 자유적금, 입출금

  interest          Float               // 연 이율
  useInterest       Boolean  @default(true)

  initialDeposit    Int?                // 계약 금액 (정기예금: 일시불 / 적금: 총 납입 목표)
  monthlyDeposit    Int?                // 정기적금용 - 월 납입금
  totalDeposited    Int?                // 실제 누적 납입금

  totalInstallments Int?                // 정기적금만 해당
  paidInstallments  Int?                // 정기적금만 해당

  maturityAt        DateTime?
  isMatured         Boolean   @default(false)
  profit            Int       @default(0)
  createdAt         DateTime  @default(now())
  demandTransactions  DemandDepositTransaction[] 
}

model DemandDepositTransaction {
  id              Int             @id @default(autoincrement())
  
  startAt         DateTime        // 예치 시작일
  endAt           DateTime        // 인출일 또는 종료일
  totalDeposited  Int             // 총입금액
  interest        Float           // 적용 이율 (%)
  useInterest     Boolean         @default(true) // 이자 적용 여부
  profit          Int             @default(0)     // 계산된 이자 (세전 or 세후 기준은 주석으로)

  depositProduct  DepositProduct  @relation(fields: [depositProductId], references: [id])
  depositProductId Int            // 연결된 예금상품 ID

  createdAt       DateTime        @default(now())
}


// enum: 카테고리를 제한된 값으로 강제
enum JudgmentCategory {
  FACT
  RESOURCE
  FORECAST
  VALUE
  STAKEHOLDER
  ETC
}

model Decision {
  id         Int       @id @default(autoincrement())
  title      String    // 질문
  why        String    // 질문 배경 또는 이유
  result     String?    // 최종 결론 (자동이든 수동이든)
  createdAt  DateTime?
  updatedAt  DateTime  @updatedAt

  judgments  Judgment[]            // 관련된 판단 요소들
}

model Judgment {
  id         Int       @id @default(autoincrement())
  decisionId Int
  decision   Decision  @relation(fields: [decisionId], references: [id], onDelete: Cascade)

  verdict    String               // "yes", "no", "undecided" 등
  category   JudgmentCategory     // enum 기반: 사실/자원/미래/가치/관계
  weight     Int
  why        String               // 이유 메모
  updatedAt  DateTime  @default(now())
}

model CoinTimeline {
  id        Int      @id @default(autoincrement())
  coin      String   // "BTC", "ETH" 등
  yyyymmdd  String

  close     Float
  volume    Float
  rsi       Float
  ema15     Float
  ema50     Float
  ema100    Float
  cross15   Boolean
  cross50   Boolean
}


// installment deposit
// Time Deposit 